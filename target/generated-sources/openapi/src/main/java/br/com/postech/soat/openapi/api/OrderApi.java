/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.postech.soat.openapi.api;

import br.com.postech.soat.openapi.model.FindCustomer400ResponseDto;
import br.com.postech.soat.openapi.model.GetOrders200ResponseInnerDto;
import br.com.postech.soat.openapi.model.PostOrders201ResponseDto;
import br.com.postech.soat.openapi.model.PostOrdersRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Order", description = "Operações relacionadas a pedidos")
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /orders : Listar pedidos ativos
     * Retorna uma lista paginada de pedidos que não estão com status &#x60;FINALIZED&#x60;. A lista é ordenada pela seguinte prioridade de status: &#x60;DONE&#x60; &gt; &#x60;IN_PREPARATION&#x60; &gt; &#x60;RECEIVED&#x60;. Dentro de cada status, os pedidos são ordenados do mais antigo para o mais novo.
     *
     * @param page Número da página (começando em 0) (optional, default to 0)
     * @param size Tamanho da página (número de itens por página) (optional, default to 10)
     * @return Lista de pedidos ativos ordenados por prioridade e data (status code 200)
     *         or Nenhum pedido ativo encontrado (status code 204)
     *         or  (status code 400)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "getOrders",
        summary = "Listar pedidos ativos",
        description = "Retorna uma lista paginada de pedidos que não estão com status `FINALIZED`. A lista é ordenada pela seguinte prioridade de status: `DONE` > `IN_PREPARATION` > `RECEIVED`. Dentro de cada status, os pedidos são ordenados do mais antigo para o mais novo.",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de pedidos ativos ordenados por prioridade e data", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetOrders200ResponseInnerDto.class)))
            }),
            @ApiResponse(responseCode = "204", description = "Nenhum pedido ativo encontrado"),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetOrders200ResponseInnerDto>> getOrders(
        @Min(0) @Parameter(name = "page", description = "Número da página (começando em 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Tamanho da página (número de itens por página)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"total\" : 1946.32, \"customerId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"OrderId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"discountAmountTotal\" : 1946.32, \"items\" : [ { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" }, { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" } ], \"status\" : \"RECEIVED\" }, { \"total\" : 1946.32, \"customerId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"OrderId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"discountAmountTotal\" : 1946.32, \"items\" : [ { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" }, { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" } ], \"status\" : \"RECEIVED\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /orders : Criar um novo pedido
     * Registra um novo pedido no sistema.  **Dados necessários:** - &#x60;customerId&#x60;: O ID do cliente que está realizando o pedido. - &#x60;items&#x60;: Uma lista de produtos que compõem o pedido. Para cada item, é preciso fornecer o &#x60;productId&#x60;, a &#x60;quantity&#x60; e os dados do produto (&#x60;name&#x60;, &#x60;price&#x60;, &#x60;category&#x60;).  **Comportamento:** - O sistema calcula o subtotal e o total do pedido. - O status inicial do pedido é definido como &#x60;RECEIVED&#x60;.
     *
     * @param postOrdersRequestDto Requisição para criação de um novo pedido contendo cliente, lista completa de itens com todos os dados necessários e observações opcionais. (optional)
     * @return Example response (status code 201)
     */
    @Operation(
        operationId = "postOrders",
        summary = "Criar um novo pedido",
        description = "Registra um novo pedido no sistema.  **Dados necessários:** - `customerId`: O ID do cliente que está realizando o pedido. - `items`: Uma lista de produtos que compõem o pedido. Para cada item, é preciso fornecer o `productId`, a `quantity` e os dados do produto (`name`, `price`, `category`).  **Comportamento:** - O sistema calcula o subtotal e o total do pedido. - O status inicial do pedido é definido como `RECEIVED`.",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrders201ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostOrders201ResponseDto> postOrders(
        @Parameter(name = "PostOrdersRequestDto", description = "Requisição para criação de um novo pedido contendo cliente, lista completa de itens com todos os dados necessários e observações opcionais.") @Valid @RequestBody(required = false) PostOrdersRequestDto postOrdersRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1946.32, \"discounts\" : [ { \"reason\" : \"reason\", \"amount\" : 1946.32, \"type\" : \"PERCENTAGE\" }, { \"reason\" : \"reason\", \"amount\" : 1946.32, \"type\" : \"PERCENTAGE\" } ], \"subtotal\" : 1946.32, \"OrderId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"discountAmountTotal\" : 1946.32, \"items\" : [ { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" }, { \"quantity\" : 2, \"productId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"price\" : 1946.32, \"name\" : \"Big Mac\", \"discount\" : { \"value\" : 1946.32 }, \"category\" : \"SNACK\" } ], \"status\" : \"RECEIVED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
