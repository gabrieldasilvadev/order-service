/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.postech.soat.openapi.api;

import br.com.postech.soat.openapi.model.CreateCustomerRequestDto;
import br.com.postech.soat.openapi.model.ErrorResponseDto;
import br.com.postech.soat.openapi.model.FindCustomer200ResponseDto;
import br.com.postech.soat.openapi.model.FindCustomer400ResponseDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Customer", description = "Operações relacionadas a clientes")
public interface CustomerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /customers : Criar um novo cliente
     * Registra um novo cliente no sistema. O CPF é usado como um identificador único. Se um cliente com o mesmo CPF já existir, a API retornará um erro de conflito.
     *
     * @param createCustomerRequestDto  (optional)
     * @return  (status code 201)
     *         or  (status code 400)
     *         or Cliente já cadastrado com o CPF informado. (status code 409)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "createCustomer",
        summary = "Criar um novo cliente",
        description = "Registra um novo cliente no sistema. O CPF é usado como um identificador único. Se um cliente com o mesmo CPF já existir, a API retornará um erro de conflito.",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "Cliente já cadastrado com o CPF informado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FindCustomer200ResponseDto> createCustomer(
        @Parameter(name = "CreateCustomerRequestDto", description = "") @Valid @RequestBody(required = false) CreateCustomerRequestDto createCustomerRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"name\" : \"name\", \"cpf\" : \"cpf\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers : Buscar cliente por CPF
     * Localiza e retorna os dados de um cliente específico com base no CPF fornecido. O CPF deve ser informado como um parâmetro de consulta (query parameter) e conter apenas os 11 dígitos.
     *
     * @param cpf CPF do cliente no formato apenas números (optional)
     * @return  (status code 200)
     *         or  (status code 400)
     *         or Cliente não encontrado para o CPF informado. (status code 404)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "findCustomer",
        summary = "Buscar cliente por CPF",
        description = "Localiza e retorna os dados de um cliente específico com base no CPF fornecido. O CPF deve ser informado como um parâmetro de consulta (query parameter) e conter apenas os 11 dígitos.",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cliente não encontrado para o CPF informado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FindCustomer200ResponseDto> findCustomer(
        @Pattern(regexp = "^\\d{11}$") @Parameter(name = "cpf", description = "CPF do cliente no formato apenas números", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpf", required = false) String cpf
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"name\" : \"name\", \"cpf\" : \"cpf\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
