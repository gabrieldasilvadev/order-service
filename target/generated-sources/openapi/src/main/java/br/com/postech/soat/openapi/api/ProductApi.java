/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.postech.soat.openapi.api;

import br.com.postech.soat.openapi.model.ErrorResponseDto;
import br.com.postech.soat.openapi.model.GetProduct200ResponseInnerDto;
import br.com.postech.soat.openapi.model.PostProducts201ResponseDto;
import br.com.postech.soat.openapi.model.PostProductsRequestDto;
import br.com.postech.soat.openapi.model.ProductDto;
import br.com.postech.soat.openapi.model.PutProductsRequestDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Product", description = "Operações relacionadas a produtos")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /products/{productId} : Inativar um produto
     * Realiza a inativação de um produto, tornando-o indisponível para novos pedidos. A operação é lógica e não remove o registro do banco de dados.
     *
     * @param productId  (required)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteProducts",
        summary = "Inativar um produto",
        description = "Realiza a inativação de um produto, tornando-o indisponível para novos pedidos. A operação é lógica e não remove o registro do banco de dados.",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{productId}"
    )
    
    default ResponseEntity<Void> deleteProducts(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") UUID productId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Buscar produtos
     * Retorna uma lista de produtos. - Se nenhum parâmetro for fornecido, retorna todos os produtos ativos. - É possível filtrar por &#x60;category&#x60; para obter produtos de uma categoria específica.
     *
     * @param SKU SKU do produto (optional)
     * @param category Enum da categoria (optional)
     * @return Example response (status code 200)
     *         or Nenhum produto encontrado (status code 204)
     *         or Requisição inválida (status code 400)
     *         or Erro interno ao buscar produtos (status code 500)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Buscar produtos",
        description = "Retorna uma lista de produtos. - Se nenhum parâmetro for fornecido, retorna todos os produtos ativos. - É possível filtrar por `category` para obter produtos de uma categoria específica.",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Example response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetProduct200ResponseInnerDto.class)))
            }),
            @ApiResponse(responseCode = "204", description = "Nenhum produto encontrado"),
            @ApiResponse(responseCode = "400", description = "Requisição inválida"),
            @ApiResponse(responseCode = "500", description = "Erro interno ao buscar produtos")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetProduct200ResponseInnerDto>> getProduct(
        @Parameter(name = "SKU", description = "SKU do produto", in = ParameterIn.QUERY) @Valid @RequestParam(value = "SKU", required = false) String SKU,
        @Parameter(name = "category", description = "Enum da categoria", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"image\" : \"image\", \"price\" : 1946.32, \"name\" : \"name\", \"description\" : \"description\", \"active\" : true, \"id\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"sku\" : \"sku\", \"category\" : \"SNACK\" }, { \"image\" : \"image\", \"price\" : 1946.32, \"name\" : \"name\", \"description\" : \"description\", \"active\" : true, \"id\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"sku\" : \"sku\", \"category\" : \"SNACK\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /products : Criar um novo produto
     * Cria um novo produto no catálogo, exigindo dados como nome, SKU, preço e categoria.
     *
     * @param postProductsRequestDto  (optional)
     * @return Produto criado com sucesso! (status code 201)
     *         or Dados inválidos. Por favor, valide as informações. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "postProducts",
        summary = "Criar um novo produto",
        description = "Cria um novo produto no catálogo, exigindo dados como nome, SKU, preço e categoria.",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Produto criado com sucesso!", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostProducts201ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados inválidos. Por favor, valide as informações.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostProducts201ResponseDto> postProducts(
        @Parameter(name = "PostProductsRequestDto", description = "") @Valid @RequestBody(required = false) PostProductsRequestDto postProductsRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{productId} : Atualizar um produto
     * Atualiza os dados de um produto existente com base no seu &#x60;productId&#x60;.
     *
     * @param productId  (required)
     * @param putProductsRequestDto  (optional)
     * @return Produto atualizado com sucesso! (status code 200)
     *         or Dados inválidos. Verifique os campos obrigatórios e o formato enviado. (status code 400)
     *         or Recurso não encontrado. Verifique o identificador ou o endpoint. (status code 404)
     *         or Erro interno no servidor. Tente novamente mais tarde ou contate o suporte. (status code 500)
     */
    @Operation(
        operationId = "putProducts",
        summary = "Atualizar um produto",
        description = "Atualiza os dados de um produto existente com base no seu `productId`.",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Produto atualizado com sucesso!", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados inválidos. Verifique os campos obrigatórios e o formato enviado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso não encontrado. Verifique o identificador ou o endpoint.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro interno no servidor. Tente novamente mais tarde ou contate o suporte.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDto> putProducts(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") UUID productId,
        @Parameter(name = "PutProductsRequestDto", description = "") @Valid @RequestBody(required = false) PutProductsRequestDto putProductsRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"price\" : 1946.32, \"name\" : \"name\", \"active\" : true, \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"sku\" : \"sku\", \"category\" : \"SNACK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : 400, \"message\" : \"Requisição inválida\", \"error\" : [ \"Campo obrigatório 'email' não informado\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
