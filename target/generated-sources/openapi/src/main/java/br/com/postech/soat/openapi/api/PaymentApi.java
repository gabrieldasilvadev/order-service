/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.postech.soat.openapi.api;

import br.com.postech.soat.openapi.model.FindCustomer400ResponseDto;
import br.com.postech.soat.openapi.model.GetPaymentsPaymentId200ResponseDto;
import br.com.postech.soat.openapi.model.GetPaymentsPaymentIdStatus200ResponseDto;
import br.com.postech.soat.openapi.model.PaymentInitiationResultDto;
import br.com.postech.soat.openapi.model.PostPaymentsRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Payment", description = "Operações relacionadas a pagamentos")
public interface PaymentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /payments/{paymentId} : Consultar dados do pagamento
     * Retorna os detalhes completos de uma transação de pagamento, incluindo status, valor e data de processamento. Útil para verificar o resultado final de um pagamento.
     *
     * @param paymentId Identificador único da transação de pagamento gerada durante o processo de checkout. (required)
     * @return Representa os dados retornados após o processamento de um pagamento durante o checkout de um pedido. (status code 200)
     */
    @Operation(
        operationId = "getPaymentsPaymentId",
        summary = "Consultar dados do pagamento",
        description = "Retorna os detalhes completos de uma transação de pagamento, incluindo status, valor e data de processamento. Útil para verificar o resultado final de um pagamento.",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Representa os dados retornados após o processamento de um pagamento durante o checkout de um pedido.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPaymentsPaymentId200ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{paymentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetPaymentsPaymentId200ResponseDto> getPaymentsPaymentId(
        @Parameter(name = "paymentId", description = "Identificador único da transação de pagamento gerada durante o processo de checkout.", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 1946.32, \"orderId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"paymentId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"processedAt\" : \"2025-05-20T00:00:00Z\", \"paymentStatus\" : \"APPROVED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /payments/{paymentId}/status : Consultar status do pagamento
     * Endpoint otimizado para verificar rapidamente o status de uma transação de pagamento. Retorna apenas o &#x60;paymentId&#x60; e o &#x60;status&#x60; atual.
     *
     * @param paymentId Identificador único da transação de pagamento gerada durante o processo de checkout. (required)
     * @return Representa o status atual de uma transação de pagamento de forma simplificada. (status code 200)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "getPaymentsPaymentIdStatus",
        summary = "Consultar status do pagamento",
        description = "Endpoint otimizado para verificar rapidamente o status de uma transação de pagamento. Retorna apenas o `paymentId` e o `status` atual.",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Representa o status atual de uma transação de pagamento de forma simplificada.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPaymentsPaymentIdStatus200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{paymentId}/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetPaymentsPaymentIdStatus200ResponseDto> getPaymentsPaymentIdStatus(
        @Parameter(name = "paymentId", description = "Identificador único da transação de pagamento gerada durante o processo de checkout.", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"paymentId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"status\" : \"APPROVED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments : Iniciar processo de pagamento
     * Inicia o processo de pagamento para um pedido específico. A API recebe a solicitação e retorna imediatamente um &#x60;paymentId&#x60; e uma &#x60;paymentUrl&#x60; (quando disponível) para redirecionamento ao gateway de pagamento. O processamento do pagamento ocorre de forma assíncrona através do gateway (ex: Mercado Pago).  **Comportamento:** - Em caso de sucesso: retorna &#x60;paymentId&#x60; e &#x60;paymentUrl&#x60; para redirecionamento - Em caso de falha: retorna &#x60;paymentId&#x60; e &#x60;paymentUrl&#x60; como &#x60;null&#x60;
     *
     * @param postPaymentsRequestDto Representa os dados necessários para iniciar o processo de pagamento de um pedido. Esse objeto é enviado no corpo da requisição. (optional)
     * @return Pagamento iniciado com sucesso. Contém o identificador único da transação e a URL de pagamento para redirecionamento (quando disponível). (status code 202)
     *         or  (status code 400)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "postPayments",
        summary = "Iniciar processo de pagamento",
        description = "Inicia o processo de pagamento para um pedido específico. A API recebe a solicitação e retorna imediatamente um `paymentId` e uma `paymentUrl` (quando disponível) para redirecionamento ao gateway de pagamento. O processamento do pagamento ocorre de forma assíncrona através do gateway (ex: Mercado Pago).  **Comportamento:** - Em caso de sucesso: retorna `paymentId` e `paymentUrl` para redirecionamento - Em caso de falha: retorna `paymentId` e `paymentUrl` como `null`",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Pagamento iniciado com sucesso. Contém o identificador único da transação e a URL de pagamento para redirecionamento (quando disponível).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentInitiationResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindCustomer400ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PaymentInitiationResultDto> postPayments(
        @Parameter(name = "PostPaymentsRequestDto", description = "Representa os dados necessários para iniciar o processo de pagamento de um pedido. Esse objeto é enviado no corpo da requisição.") @Valid @RequestBody(required = false) PostPaymentsRequestDto postPaymentsRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"paymentId\" : \"241fae7b-0210-4d29-a928-90653c9a9a89\", \"paymentUrl\" : \"https://www.mercadopago.com/mlb/payments/ticket?foo=bar\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\", \"error\" : [ \"error\", \"error\" ], \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
