/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.postech.soat.openapi.api;

import br.com.postech.soat.openapi.model.Login200ResponseDto;
import br.com.postech.soat.openapi.model.LoginRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Authentication", description = "the Authentication API")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : Autenticação de cliente via CPF
     * Gera um token JWT válido a partir do CPF informado.
     *
     * @param loginRequestDto  (required)
     * @return Token JWT gerado com sucesso. (status code 200)
     *         or CPF não cadastrado ou inválido. (status code 401)
     */
    @Operation(
        operationId = "login",
        summary = "Autenticação de cliente via CPF",
        description = "Gera um token JWT válido a partir do CPF informado.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token JWT gerado com sucesso.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Login200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "CPF não cadastrado ou inválido.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Login200ResponseDto> login(
        @Parameter(name = "LoginRequestDto", description = "", required = true) @Valid @RequestBody LoginRequestDto loginRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/refresh : Atualizar token JWT
     * Gera um novo token JWT a partir de um token válido informado no header Authorization.
     *
     * @return Novo token JWT gerado com sucesso. (status code 200)
     *         or Token ausente ou inválido. (status code 401)
     */
    @Operation(
        operationId = "refresh",
        summary = "Atualizar token JWT",
        description = "Gera um novo token JWT a partir de um token válido informado no header Authorization.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Novo token JWT gerado com sucesso.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Login200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Token ausente ou inválido.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/refresh",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Login200ResponseDto> refresh(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
